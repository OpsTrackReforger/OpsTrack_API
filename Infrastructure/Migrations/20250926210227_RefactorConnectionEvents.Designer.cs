// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(OpsTrackContext))]
    [Migration("20250926210227_RefactorConnectionEvents")]
    partial class RefactorConnectionEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Domain.Entities.CombatEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTeamKill")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VictimId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Weapon")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.HasIndex("ActorId");

                    b.HasIndex("VictimId");

                    b.ToTable("CombatEvent");
                });

            modelBuilder.Entity("Domain.Entities.ConnectionEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GameIdentity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.HasIndex("GameIdentity");

                    b.ToTable("ConnectionEvents");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("eventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("eventTypeId");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Domain.Entities.Player", b =>
                {
                    b.Property<string>("GameIdentity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastKnownName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.HasKey("GameIdentity");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Entities.CombatEvent", b =>
                {
                    b.HasOne("Domain.Entities.Player", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.CombatEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Player", "Victim")
                        .WithMany()
                        .HasForeignKey("VictimId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Event");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("Domain.Entities.ConnectionEvent", b =>
                {
                    b.HasOne("Domain.Entities.Event", "Event")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.ConnectionEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Player", "Player")
                        .WithMany("ConnectionEvents")
                        .HasForeignKey("GameIdentity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.Player", b =>
                {
                    b.Navigation("ConnectionEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
